import java.util.*;

public class Solution {
    public int[] solution(int N, int[] stages) {
        // 실패율을 저장할 리스트 (스테이지 번호와 실패율을 함께 저장)
        List<Stage> stageList = new ArrayList<>();

        // 각 스테이지에 도달한 사용자 수를 세기 위한 배열
        int[] reached = new int[N + 2];  // 1~N+1까지 사용

        // 각 사용자의 현재 스테이지 정보를 이용해 도달한 횟수 누적
        for (int stage : stages) {
            reached[stage]++;
        }

        // 총 사용자 수 (앞에서부터 사용자 수를 누적해 계산)
        int totalUsers = stages.length;

        // 각 스테이지의 실패율 계산
        for (int i = 1; i <= N; i++) {
            if (totalUsers > 0) {
                // 실패율 = (해당 스테이지에서 멈춘 사용자 수) / (해당 스테이지에 도달한 사용자 수)
                double failureRate = (double) reached[i] / totalUsers;
                stageList.add(new Stage(i, failureRate));
                totalUsers -= reached[i];  // 다음 스테이지로 넘어갈 때 남은 사용자 수를 갱신
            } else {
                // 도달한 사용자가 없는 경우 실패율 0
                stageList.add(new Stage(i, 0));
            }
        }

        // 실패율을 기준으로 내림차순 정렬 (실패율이 같다면 스테이지 번호가 작은 순서로)
        stageList.sort((a, b) -> {
            if (b.failureRate == a.failureRate) {
                return a.stage - b.stage;  // 스테이지 번호 오름차순
            } else {
                return Double.compare(b.failureRate, a.failureRate);  // 실패율 내림차순
            }
        });

        // 정렬된 스테이지 번호만 배열로 변환
        return stageList.stream().mapToInt(s -> s.stage).toArray();
    }

    // 스테이지 번호와 실패율을 저장하는 클래스
    static class Stage {
        int stage;
        double failureRate;

        Stage(int stage, double failureRate) {
            this.stage = stage;
            this.failureRate = failureRate;
        }
    }
}
