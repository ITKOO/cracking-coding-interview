import java.util.*;

public class Solution {
    public int solution(String dirs) {
        // 방문한 길을 저장할 Set (출발점과 도착점의 쌍을 저장)
        Set<String> visited = new HashSet<>();

        // 시작 좌표 (0, 0)
        int x = 0, y = 0;

        // 각 명령에 따른 방향 이동 (U, D, R, L)
        int[] dx = {0, 0, 1, -1};  // R(1), L(-1)
        int[] dy = {1, -1, 0, 0};  // U(1), D(-1)

        // 명령어에 해당하는 인덱스 찾기
        Map<Character, Integer> directionMap = new HashMap<>();
        directionMap.put('U', 0);
        directionMap.put('D', 1);
        directionMap.put('R', 2);
        directionMap.put('L', 3);

        // 명령어 처리
        for (char dir : dirs.toCharArray()) {
            int dirIndex = directionMap.get(dir);

            // 다음 위치 계산
            int nx = x + dx[dirIndex];
            int ny = y + dy[dirIndex];

            // 경계를 벗어나는지 확인
            if (nx < -5 || nx > 5 || ny < -5 || ny > 5) {
                continue;  // 경계를 벗어나면 무시
            }

            // 경로를 양방향으로 저장 (출발점 -> 도착점, 도착점 -> 출발점)
            String path1 = x + "," + y + "->" + nx + "," + ny;
            String path2 = nx + "," + ny + "->" + x + "," + y;

            // 처음 방문한 길만 Set에 저장
            visited.add(path1);
            visited.add(path2);

            // 좌표 갱신
            x = nx;
            y = ny;
        }

        // 처음 걸어본 길의 수 반환 (양방향으로 저장했으므로 절반으로 나눔)
        return visited.size() / 2;
    }
}
